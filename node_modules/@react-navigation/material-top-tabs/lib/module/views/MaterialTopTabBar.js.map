{"version":3,"sources":["MaterialTopTabBar.tsx"],"names":["useTheme","Color","React","StyleSheet","Text","View","TabBar","TabBarIndicator","TabBarTop","state","navigation","descriptors","rest","colors","focusedOptions","routes","index","key","options","activeColor","tabBarActiveTintColor","text","inactiveColor","tabBarInactiveTintColor","alpha","rgb","string","tabBarScrollEnabled","tabBarBounces","tabBarPressColor","tabBarPressOpacity","tabBarItemStyle","backgroundColor","primary","tabBarIndicatorStyle","tabBarIndicatorContainerStyle","tabBarContentContainerStyle","card","tabBarStyle","route","tabBarAccessibilityLabel","tabBarTestID","preventDefault","event","emit","type","target","canPreventDefault","defaultPrevented","focused","color","tabBarShowIcon","tabBarIcon","undefined","icon","styles","tabBarIconStyle","tabBarShowLabel","label","tabBarLabel","title","name","tabBarLabelStyle","tabBarAllowFontScaling","tabBarBadge","navigationState","tabBarIndicator","create","height","width","textAlign","textTransform","fontSize","margin"],"mappings":"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","sourcesContent":["import {\n  ParamListBase,\n  Route,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { TabBar, TabBarIndicator } from 'react-native-tab-view';\n\nimport type { MaterialTopTabBarProps } from '../types';\n\nexport default function TabBarTop({\n  state,\n  navigation,\n  descriptors,\n  ...rest\n}: MaterialTopTabBarProps) {\n  const { colors } = useTheme();\n\n  const focusedOptions = descriptors[state.routes[state.index].key].options;\n\n  const activeColor = focusedOptions.tabBarActiveTintColor ?? colors.text;\n  const inactiveColor =\n    focusedOptions.tabBarInactiveTintColor ??\n    Color(activeColor).alpha(0.5).rgb().string();\n\n  return (\n    <TabBar\n      {...rest}\n      navigationState={state}\n      scrollEnabled={focusedOptions.tabBarScrollEnabled}\n      bounces={focusedOptions.tabBarBounces}\n      activeColor={activeColor}\n      inactiveColor={inactiveColor}\n      pressColor={focusedOptions.tabBarPressColor}\n      pressOpacity={focusedOptions.tabBarPressOpacity}\n      tabStyle={focusedOptions.tabBarItemStyle}\n      indicatorStyle={[\n        { backgroundColor: colors.primary },\n        focusedOptions.tabBarIndicatorStyle,\n      ]}\n      indicatorContainerStyle={focusedOptions.tabBarIndicatorContainerStyle}\n      contentContainerStyle={focusedOptions.tabBarContentContainerStyle}\n      style={[{ backgroundColor: colors.card }, focusedOptions.tabBarStyle]}\n      getAccessibilityLabel={({ route }) =>\n        descriptors[route.key].options.tabBarAccessibilityLabel\n      }\n      getTestID={({ route }) => descriptors[route.key].options.tabBarTestID}\n      onTabPress={({ route, preventDefault }) => {\n        const event = navigation.emit({\n          type: 'tabPress',\n          target: route.key,\n          canPreventDefault: true,\n        });\n\n        if (event.defaultPrevented) {\n          preventDefault();\n        }\n      }}\n      onTabLongPress={({ route }) =>\n        navigation.emit({\n          type: 'tabLongPress',\n          target: route.key,\n        })\n      }\n      renderIcon={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarShowIcon === false) {\n          return null;\n        }\n\n        if (options.tabBarIcon !== undefined) {\n          const icon = options.tabBarIcon({ focused, color });\n\n          return (\n            <View style={[styles.icon, options.tabBarIconStyle]}>{icon}</View>\n          );\n        }\n\n        return null;\n      }}\n      renderLabel={({ route, focused, color }) => {\n        const { options } = descriptors[route.key];\n\n        if (options.tabBarShowLabel === false) {\n          return null;\n        }\n\n        const label =\n          options.tabBarLabel !== undefined\n            ? options.tabBarLabel\n            : options.title !== undefined\n            ? options.title\n            : (route as Route<string>).name;\n\n        if (typeof label === 'string') {\n          return (\n            <Text\n              style={[styles.label, { color }, options.tabBarLabelStyle]}\n              allowFontScaling={options.tabBarAllowFontScaling}\n            >\n              {label}\n            </Text>\n          );\n        }\n\n        return label({ focused, color });\n      }}\n      renderBadge={({ route }) => {\n        const { tabBarBadge } = descriptors[route.key].options;\n\n        return tabBarBadge?.() ?? null;\n      }}\n      renderIndicator={({ navigationState: state, ...rest }) => {\n        return focusedOptions.tabBarIndicator ? (\n          focusedOptions.tabBarIndicator({\n            state: state as TabNavigationState<ParamListBase>,\n            ...rest,\n          })\n        ) : (\n          <TabBarIndicator navigationState={state} {...rest} />\n        );\n      }}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontSize: 13,\n    margin: 4,\n    backgroundColor: 'transparent',\n  },\n});\n"]}