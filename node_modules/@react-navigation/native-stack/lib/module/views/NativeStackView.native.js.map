{"version":3,"sources":["NativeStackView.native.tsx"],"names":["getDefaultHeaderHeight","getHeaderTitle","HeaderHeightContext","HeaderShownContext","SafeAreaProviderCompat","StackActions","useTheme","React","Platform","StyleSheet","useSafeAreaFrame","useSafeAreaInsets","Screen","ScreenStack","warnOnce","DebugContainer","HeaderConfig","isAndroid","OS","MaybeNestedStack","options","route","presentation","children","colors","header","headerShown","contentStyle","isHeaderInModal","undefined","headerShownPreviousRef","useRef","useEffect","current","name","content","styles","container","backgroundColor","background","insets","dimensions","isLandscape","width","height","isPad","isTVOS","isFullScreenModal","topInset","top","headerHeight","absoluteFill","SceneView","descriptor","previousDescriptor","index","onWillDisappear","onAppear","onDisappear","onDismissed","navigation","render","gestureEnabled","animationTypeForReplace","animation","orientation","statusBarAnimation","statusBarHidden","statusBarStyle","isHeaderInPush","isParentHeaderShown","useContext","parentHeaderHeight","key","back","title","NativeStackViewInner","state","descriptors","nextDismissedKey","setNextDismissedKey","useState","dismissedRouteName","routes","find","message","console","error","map","previousKey","emit","type","data","closing","target","dispatch","pop","source","NativeStackView","props","create","flex"],"mappings":";;AAAA,SACEA,sBADF,EAEEC,cAFF,EAGEC,mBAHF,EAIEC,kBAJF,EAKEC,sBALF,QAMO,4BANP;AAOA,SAGEC,YAHF,EAKEC,QALF,QAMO,0BANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAsCC,UAAtC,QAAwD,cAAxD;AACA,SACEC,gBADF,EAEEC,iBAFF,QAGO,gCAHP;AAIA,SACEC,MADF,EAEEC,WAFF,QAIO,sBAJP;AAKA,OAAOC,QAAP,MAAqB,WAArB;AAQA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,MAAMC,SAAS,GAAGT,QAAQ,CAACU,EAAT,KAAgB,SAAlC;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AACxBC,EAAAA,OADwB;AAExBC,EAAAA,KAFwB;AAGxBC,EAAAA,YAHwB;AAIxBC,EAAAA;AAJwB,CAAD,KAUnB;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAalB,QAAQ,EAA3B;AACA,QAAM;AAAEmB,IAAAA,MAAF;AAAUC,IAAAA,WAAW,GAAG,IAAxB;AAA8BC,IAAAA;AAA9B,MAA+CP,OAArD;AAEA,QAAMQ,eAAe,GAAGX,SAAS,GAC7B,KAD6B,GAE7BK,YAAY,KAAK,MAAjB,IAA2BI,WAAW,KAAK,IAA3C,IAAmDD,MAAM,KAAKI,SAFlE;AAIA,QAAMC,sBAAsB,GAAGvB,KAAK,CAACwB,MAAN,CAAaL,WAAb,CAA/B;AAEAnB,EAAAA,KAAK,CAACyB,SAAN,CAAgB,MAAM;AACpBlB,IAAAA,QAAQ,CACN,CAACG,SAAD,IACEK,YAAY,KAAK,MADnB,IAEEQ,sBAAsB,CAACG,OAAvB,KAAmCP,WAH/B,EAIL,6IAA4IL,KAAK,CAACa,IAAK,IAJlJ,CAAR;AAOAJ,IAAAA,sBAAsB,CAACG,OAAvB,GAAiCP,WAAjC;AACD,GATD,EASG,CAACA,WAAD,EAAcJ,YAAd,EAA4BD,KAAK,CAACa,IAAlC,CATH;AAWA,QAAMC,OAAO,gBACX,oBAAC,cAAD;AACE,IAAA,KAAK,EAAE,CACLC,MAAM,CAACC,SADF,EAELf,YAAY,KAAK,kBAAjB,IACEA,YAAY,KAAK,2BADnB,IACkD;AAC9CgB,MAAAA,eAAe,EAAEd,MAAM,CAACe;AADsB,KAH7C,EAMLZ,YANK,CADT;AASE,IAAA,iBAAiB,EAAEL,YAAY,KAAK,MAAjB,GAA0B,MAA1B,GAAmCA;AATxD,KAWGC,QAXH,CADF;AAgBA,QAAMiB,MAAM,GAAG7B,iBAAiB,EAAhC;AACA,QAAM8B,UAAU,GAAG/B,gBAAgB,EAAnC,CAtCI,CAuCJ;;AACA,QAAMgC,WAAW,GACfD,UAAU,CAACE,KAAX,GAAmBF,UAAU,CAACG,MAA9B,IACA,CAAEpC,QAAD,CAAgCqC,KADjC,IAEA,CAAErC,QAAD,CAAgCsC,MAHnC,CAxCI,CA4CJ;;AACA,QAAMC,iBAAiB,GACrBzB,YAAY,KAAK,OAAjB,IAA4BA,YAAY,KAAK,WAD/C;AAEA,QAAM0B,QAAQ,GAAGD,iBAAiB,IAAI,CAACL,WAAtB,GAAoCF,MAAM,CAACS,GAA3C,GAAiD,CAAlE;AACA,QAAMC,YAAY,GAAGlD,sBAAsB,CACzCyC,UADyC,EAEzC,CAACM,iBAFwC,EAGzCC,QAHyC,CAA3C;;AAMA,MAAIpB,eAAJ,EAAqB;AACnB,wBACE,oBAAC,WAAD;AAAa,MAAA,KAAK,EAAEQ,MAAM,CAACC;AAA3B,oBACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,MAAf;AAAgB,MAAA,KAAK,EAAE5B,UAAU,CAAC0C;AAAlC,oBACE,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,MAAA,KAAK;AAAlC,oBACE,oBAAC,mBAAD,CAAqB,QAArB;AAA8B,MAAA,KAAK,EAAED;AAArC,oBACE,oBAAC,YAAD,eAAkB9B,OAAlB;AAA2B,MAAA,KAAK,EAAEC;AAAlC,OADF,EAEGc,OAFH,CADF,CADF,CADF,CADF;AAYD;;AAED,SAAOA,OAAP;AACD,CAhFD;;AA4FA,MAAMiB,SAAS,GAAG,CAAC;AACjBC,EAAAA,UADiB;AAEjBC,EAAAA,kBAFiB;AAGjBC,EAAAA,KAHiB;AAIjBC,EAAAA,eAJiB;AAKjBC,EAAAA,QALiB;AAMjBC,EAAAA,WANiB;AAOjBC,EAAAA;AAPiB,CAAD,KAQI;AACpB,QAAM;AAAEtC,IAAAA,KAAF;AAASuC,IAAAA,UAAT;AAAqBxC,IAAAA,OAArB;AAA8ByC,IAAAA;AAA9B,MAAyCR,UAA/C;AACA,QAAM;AACJS,IAAAA,cADI;AAEJrC,IAAAA,MAFI;AAGJC,IAAAA,WAHI;AAIJqC,IAAAA,uBAAuB,GAAG,KAJtB;AAKJC,IAAAA,SALI;AAMJC,IAAAA,WANI;AAOJC,IAAAA,kBAPI;AAQJC,IAAAA,eARI;AASJC,IAAAA;AATI,MAUFhD,OAVJ;AAYA,MAAI;AAAEE,IAAAA,YAAY,GAAG;AAAjB,MAA4BF,OAAhC;;AAEA,MAAImC,KAAK,KAAK,CAAd,EAAiB;AACf;AACA;AACAjC,IAAAA,YAAY,GAAG,MAAf;AACD;;AAED,QAAM+C,cAAc,GAAGpD,SAAS,GAC5BS,WAD4B,GAE5BJ,YAAY,KAAK,MAAjB,IAA2BI,WAAW,KAAK,KAF/C;AAIA,QAAM4C,mBAAmB,GAAG/D,KAAK,CAACgE,UAAN,CAAiBpE,kBAAjB,CAA5B;AACA,QAAMqC,MAAM,GAAG7B,iBAAiB,EAAhC;AACA,QAAM6D,kBAAkB,GAAGjE,KAAK,CAACgE,UAAN,CAAiBrE,mBAAjB,CAA3B;AACA,QAAMgD,YAAY,GAAGlD,sBAAsB,CACzCU,gBAAgB,EADyB,EAEzC,KAFyC,EAGzC8B,MAAM,CAACS,GAHkC,CAA3C;AAMA,sBACE,oBAAC,MAAD;AACE,IAAA,GAAG,EAAE5B,KAAK,CAACoD,GADb;AAEE,IAAA,OAAO,MAFT;AAGE,IAAA,KAAK,EAAEhE,UAAU,CAAC0C,YAHpB;AAIE,IAAA,cAAc,EACZlC,SAAS,GACL;AACA;AACA,SAHK,GAIL6C,cATR;AAWE,IAAA,gBAAgB,EAAEC,uBAXpB;AAYE,IAAA,iBAAiB,EAAEzC,YAAY,KAAK,MAAjB,GAA0B,MAA1B,GAAmCA,YAZxD;AAaE,IAAA,cAAc,EAAE0C,SAblB;AAcE,IAAA,iBAAiB,EAAEC,WAdrB;AAeE,IAAA,kBAAkB,EAAEC,kBAftB;AAgBE,IAAA,eAAe,EAAEC,eAhBnB;AAiBE,IAAA,cAAc,EAAEC,cAjBlB;AAkBE,IAAA,eAAe,EAAEZ,eAlBnB;AAmBE,IAAA,QAAQ,EAAEC,QAnBZ;AAoBE,IAAA,WAAW,EAAEC,WApBf;AAqBE,IAAA,WAAW,EAAEC;AArBf,kBAuBE,oBAAC,kBAAD,CAAoB,QAApB;AACE,IAAA,KAAK,EAAEW,mBAAmB,IAAID,cAAc,KAAK;AADnD,kBAGE,oBAAC,mBAAD,CAAqB,QAArB;AACE,IAAA,KAAK,EACHA,cAAc,KAAK,KAAnB,GAA2BnB,YAA3B,GAA0CsB,kBAA1C,aAA0CA,kBAA1C,cAA0CA,kBAA1C,GAAgE;AAFpE,KAKG/C,MAAM,KAAKI,SAAX,IAAwBH,WAAW,KAAK,KAAxC,GACC;AACAD,EAAAA,MAAM,CAAC;AACLiD,IAAAA,IAAI,EAAEpB,kBAAkB,GACpB;AACEqB,MAAAA,KAAK,EAAE1E,cAAc,CACnBqD,kBAAkB,CAAClC,OADA,EAEnBkC,kBAAkB,CAACjC,KAAnB,CAAyBa,IAFN;AADvB,KADoB,GAOpBL,SARC;AASLT,IAAAA,OATK;AAULC,IAAAA,KAVK;AAWLuC,IAAAA;AAXK,GAAD,CAFP,gBAgBC,oBAAC,YAAD,eACMxC,OADN;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,WAAW,EAAEgD;AAHf,KArBJ,eA2BE,oBAAC,gBAAD;AACE,IAAA,OAAO,EAAEjD,OADX;AAEE,IAAA,KAAK,EAAEC,KAFT;AAGE,IAAA,YAAY,EAAEC;AAHhB,KAKGuC,MAAM,EALT,CA3BF,CAHF,CAvBF,CADF;AAiED,CA5GD;;AAoHA,SAASe,oBAAT,CAA8B;AAAEC,EAAAA,KAAF;AAASjB,EAAAA,UAAT;AAAqBkB,EAAAA;AAArB,CAA9B,EAAyE;AAAA;;AACvE,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IACJzE,KAAK,CAAC0E,QAAN,CAA8B,IAA9B,CADF;AAGA,QAAMC,kBAAkB,GAAGH,gBAAgB,yBACvCF,KAAK,CAACM,MAAN,CAAaC,IAAb,CAAmB/D,KAAD,IAAWA,KAAK,CAACoD,GAAN,KAAcM,gBAA3C,CADuC,uDACvC,mBAA8D7C,IADvB,GAEvC,IAFJ;AAIA3B,EAAAA,KAAK,CAACyB,SAAN,CAAgB,MAAM;AACpB,QAAIkD,kBAAJ,EAAwB;AACtB,YAAMG,OAAO,GACV,eAAcH,kBAAmB,+DAAlC,GACC,6HADD,GAEC,uJAHH;AAKAI,MAAAA,OAAO,CAACC,KAAR,CAAcF,OAAd;AACD;AACF,GATD,EASG,CAACH,kBAAD,CATH;AAWA,sBACE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE9C,MAAM,CAACC;AAA3B,KACGwC,KAAK,CAACM,MAAN,CAAaK,GAAb,CAAiB,CAACnE,KAAD,EAAQkC,KAAR,KAAkB;AAAA;;AAClC,UAAMF,UAAU,GAAGyB,WAAW,CAACzD,KAAK,CAACoD,GAAP,CAA9B;AACA,UAAMgB,WAAW,oBAAGZ,KAAK,CAACM,MAAN,CAAa5B,KAAK,GAAG,CAArB,CAAH,kDAAG,cAAyBkB,GAA7C;AACA,UAAMnB,kBAAkB,GAAGmC,WAAW,GAClCX,WAAW,CAACW,WAAD,CADuB,GAElC5D,SAFJ;AAIA,wBACE,oBAAC,SAAD;AACE,MAAA,GAAG,EAAER,KAAK,CAACoD,GADb;AAEE,MAAA,KAAK,EAAElB,KAFT;AAGE,MAAA,UAAU,EAAEF,UAHd;AAIE,MAAA,kBAAkB,EAAEC,kBAJtB;AAKE,MAAA,eAAe,EAAE,MAAM;AACrBM,QAAAA,UAAU,CAAC8B,IAAX,CAAgB;AACdC,UAAAA,IAAI,EAAE,iBADQ;AAEdC,UAAAA,IAAI,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAFQ;AAGdC,UAAAA,MAAM,EAAEzE,KAAK,CAACoD;AAHA,SAAhB;AAKD,OAXH;AAYE,MAAA,QAAQ,EAAE,MAAM;AACdb,QAAAA,UAAU,CAAC8B,IAAX,CAAgB;AACdC,UAAAA,IAAI,EAAE,eADQ;AAEdC,UAAAA,IAAI,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAFQ;AAGdC,UAAAA,MAAM,EAAEzE,KAAK,CAACoD;AAHA,SAAhB;AAKD,OAlBH;AAmBE,MAAA,WAAW,EAAE,MAAM;AACjBb,QAAAA,UAAU,CAAC8B,IAAX,CAAgB;AACdC,UAAAA,IAAI,EAAE,eADQ;AAEdC,UAAAA,IAAI,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAFQ;AAGdC,UAAAA,MAAM,EAAEzE,KAAK,CAACoD;AAHA,SAAhB;AAKD,OAzBH;AA0BE,MAAA,WAAW,EAAE,MAAM;AACjBb,QAAAA,UAAU,CAACmC,QAAX,CAAoB,EAClB,GAAG1F,YAAY,CAAC2F,GAAb,EADe;AAElBC,UAAAA,MAAM,EAAE5E,KAAK,CAACoD,GAFI;AAGlBqB,UAAAA,MAAM,EAAEjB,KAAK,CAACJ;AAHI,SAApB;AAMAO,QAAAA,mBAAmB,CAAC3D,KAAK,CAACoD,GAAP,CAAnB;AACD;AAlCH,MADF;AAsCD,GA7CA,CADH,CADF;AAkDD;;AAED,eAAe,SAASyB,eAAT,CAAyBC,KAAzB,EAAuC;AACpD,sBACE,oBAAC,sBAAD,qBACE,oBAAC,oBAAD,EAA0BA,KAA1B,CADF,CADF;AAKD;AAED,MAAM/D,MAAM,GAAG3B,UAAU,CAAC2F,MAAX,CAAkB;AAC/B/D,EAAAA,SAAS,EAAE;AACTgE,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf","sourcesContent":["import {\n  getDefaultHeaderHeight,\n  getHeaderTitle,\n  HeaderHeightContext,\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Platform, PlatformIOSStatic, StyleSheet } from 'react-native';\nimport {\n  useSafeAreaFrame,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport {\n  Screen,\n  ScreenStack,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport warnOnce from 'warn-once';\n\nimport type {\n  NativeStackDescriptor,\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n  NativeStackNavigationOptions,\n} from '../types';\nimport DebugContainer from './DebugContainer';\nimport HeaderConfig from './HeaderConfig';\n\nconst isAndroid = Platform.OS === 'android';\n\nconst MaybeNestedStack = ({\n  options,\n  route,\n  presentation,\n  children,\n}: {\n  options: NativeStackNavigationOptions;\n  route: Route<string>;\n  presentation: Exclude<StackPresentationTypes, 'push'> | 'card';\n  children: React.ReactNode;\n}) => {\n  const { colors } = useTheme();\n  const { header, headerShown = true, contentStyle } = options;\n\n  const isHeaderInModal = isAndroid\n    ? false\n    : presentation !== 'card' && headerShown === true && header === undefined;\n\n  const headerShownPreviousRef = React.useRef(headerShown);\n\n  React.useEffect(() => {\n    warnOnce(\n      !isAndroid &&\n        presentation !== 'card' &&\n        headerShownPreviousRef.current !== headerShown,\n      `Dynamically changing 'headerShown' in modals will result in remounting the screen and losing all local state. See options for the screen '${route.name}'.`\n    );\n\n    headerShownPreviousRef.current = headerShown;\n  }, [headerShown, presentation, route.name]);\n\n  const content = (\n    <DebugContainer\n      style={[\n        styles.container,\n        presentation !== 'transparentModal' &&\n          presentation !== 'containedTransparentModal' && {\n            backgroundColor: colors.background,\n          },\n        contentStyle,\n      ]}\n      stackPresentation={presentation === 'card' ? 'push' : presentation}\n    >\n      {children}\n    </DebugContainer>\n  );\n\n  const insets = useSafeAreaInsets();\n  const dimensions = useSafeAreaFrame();\n  // landscape is meaningful only for iPhone\n  const isLandscape =\n    dimensions.width > dimensions.height &&\n    !(Platform as PlatformIOSStatic).isPad &&\n    !(Platform as PlatformIOSStatic).isTVOS;\n  // `modal` and `formSheet` presentations do not take whole screen, so should not take the inset.\n  const isFullScreenModal =\n    presentation !== 'modal' && presentation !== 'formSheet';\n  const topInset = isFullScreenModal && !isLandscape ? insets.top : 0;\n  const headerHeight = getDefaultHeaderHeight(\n    dimensions,\n    !isFullScreenModal,\n    topInset\n  );\n\n  if (isHeaderInModal) {\n    return (\n      <ScreenStack style={styles.container}>\n        <Screen enabled style={StyleSheet.absoluteFill}>\n          <HeaderShownContext.Provider value>\n            <HeaderHeightContext.Provider value={headerHeight}>\n              <HeaderConfig {...options} route={route} />\n              {content}\n            </HeaderHeightContext.Provider>\n          </HeaderShownContext.Provider>\n        </Screen>\n      </ScreenStack>\n    );\n  }\n\n  return content;\n};\n\ntype SceneViewProps = {\n  index: number;\n  descriptor: NativeStackDescriptor;\n  previousDescriptor?: NativeStackDescriptor;\n  onWillDisappear: () => void;\n  onAppear: () => void;\n  onDisappear: () => void;\n  onDismissed: () => void;\n};\n\nconst SceneView = ({\n  descriptor,\n  previousDescriptor,\n  index,\n  onWillDisappear,\n  onAppear,\n  onDisappear,\n  onDismissed,\n}: SceneViewProps) => {\n  const { route, navigation, options, render } = descriptor;\n  const {\n    gestureEnabled,\n    header,\n    headerShown,\n    animationTypeForReplace = 'pop',\n    animation,\n    orientation,\n    statusBarAnimation,\n    statusBarHidden,\n    statusBarStyle,\n  } = options;\n\n  let { presentation = 'card' } = options;\n\n  if (index === 0) {\n    // first screen should always be treated as `card`, it resolves problems with no header animation\n    // for navigator with first screen as `modal` and the next as `card`\n    presentation = 'card';\n  }\n\n  const isHeaderInPush = isAndroid\n    ? headerShown\n    : presentation === 'card' && headerShown !== false;\n\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const insets = useSafeAreaInsets();\n  const parentHeaderHeight = React.useContext(HeaderHeightContext);\n  const headerHeight = getDefaultHeaderHeight(\n    useSafeAreaFrame(),\n    false,\n    insets.top\n  );\n\n  return (\n    <Screen\n      key={route.key}\n      enabled\n      style={StyleSheet.absoluteFill}\n      gestureEnabled={\n        isAndroid\n          ? // This prop enables handling of system back gestures on Android\n            // Since we handle them in JS side, we disable this\n            false\n          : gestureEnabled\n      }\n      replaceAnimation={animationTypeForReplace}\n      stackPresentation={presentation === 'card' ? 'push' : presentation}\n      stackAnimation={animation}\n      screenOrientation={orientation}\n      statusBarAnimation={statusBarAnimation}\n      statusBarHidden={statusBarHidden}\n      statusBarStyle={statusBarStyle}\n      onWillDisappear={onWillDisappear}\n      onAppear={onAppear}\n      onDisappear={onDisappear}\n      onDismissed={onDismissed}\n    >\n      <HeaderShownContext.Provider\n        value={isParentHeaderShown || isHeaderInPush !== false}\n      >\n        <HeaderHeightContext.Provider\n          value={\n            isHeaderInPush !== false ? headerHeight : parentHeaderHeight ?? 0\n          }\n        >\n          {header !== undefined && headerShown !== false ? (\n            // TODO: expose custom header height\n            header({\n              back: previousDescriptor\n                ? {\n                    title: getHeaderTitle(\n                      previousDescriptor.options,\n                      previousDescriptor.route.name\n                    ),\n                  }\n                : undefined,\n              options,\n              route,\n              navigation,\n            })\n          ) : (\n            <HeaderConfig\n              {...options}\n              route={route}\n              headerShown={isHeaderInPush}\n            />\n          )}\n          <MaybeNestedStack\n            options={options}\n            route={route}\n            presentation={presentation}\n          >\n            {render()}\n          </MaybeNestedStack>\n        </HeaderHeightContext.Provider>\n      </HeaderShownContext.Provider>\n    </Screen>\n  );\n};\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nfunction NativeStackViewInner({ state, navigation, descriptors }: Props) {\n  const [nextDismissedKey, setNextDismissedKey] =\n    React.useState<string | null>(null);\n\n  const dismissedRouteName = nextDismissedKey\n    ? state.routes.find((route) => route.key === nextDismissedKey)?.name\n    : null;\n\n  React.useEffect(() => {\n    if (dismissedRouteName) {\n      const message =\n        `The screen '${dismissedRouteName}' was removed natively but didn't get removed from JS state. ` +\n        `This can happen if the action was prevented in a 'beforeRemove' listener, which is not fully supported in native-stack.\\n\\n` +\n        `Consider using 'gestureEnabled: false' to prevent back gesture and use a custom back button with 'headerLeft' option to override the native behavior.`;\n\n      console.error(message);\n    }\n  }, [dismissedRouteName]);\n\n  return (\n    <ScreenStack style={styles.container}>\n      {state.routes.map((route, index) => {\n        const descriptor = descriptors[route.key];\n        const previousKey = state.routes[index - 1]?.key;\n        const previousDescriptor = previousKey\n          ? descriptors[previousKey]\n          : undefined;\n\n        return (\n          <SceneView\n            key={route.key}\n            index={index}\n            descriptor={descriptor}\n            previousDescriptor={previousDescriptor}\n            onWillDisappear={() => {\n              navigation.emit({\n                type: 'transitionStart',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onAppear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: false },\n                target: route.key,\n              });\n            }}\n            onDisappear={() => {\n              navigation.emit({\n                type: 'transitionEnd',\n                data: { closing: true },\n                target: route.key,\n              });\n            }}\n            onDismissed={() => {\n              navigation.dispatch({\n                ...StackActions.pop(),\n                source: route.key,\n                target: state.key,\n              });\n\n              setNextDismissedKey(route.key);\n            }}\n          />\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nexport default function NativeStackView(props: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <NativeStackViewInner {...props} />\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}