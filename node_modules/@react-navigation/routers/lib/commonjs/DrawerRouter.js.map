{"version":3,"sources":["DrawerRouter.tsx"],"names":["DrawerActions","TabActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","history","some","it","status","filter","DrawerRouter","defaultStatus","rest","router","getInitialState","routeNames","routeParamList","routeGetIdList","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","options","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: 'open' | 'closed';\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: 'open' }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state:\n    | DrawerNavigationState<ParamListBase>\n    | PartialState<DrawerNavigationState<ParamListBase>>\n) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\nconst openDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer', status: 'open' }],\n  };\n};\n\nconst closeDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  defaultStatus,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      let state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (defaultStatus === 'open') {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (defaultStatus === 'open') {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (defaultStatus === 'open') {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]}