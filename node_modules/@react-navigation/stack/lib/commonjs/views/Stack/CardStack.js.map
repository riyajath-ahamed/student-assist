{"version":3,"sources":["CardStack.tsx"],"names":["EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","cardStyleInterpolatorCurrent","getIsModal","scene","isParentModal","isModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","headerStatusBarHeight","top","headerStyle","style","StyleSheet","flatten","height","route","key","getDistanceFromOptions","presentation","gestureDirection","ModalTransition","DefaultTransition","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","React","Component","getDerivedStateFromProps","props","state","routes","descriptors","gestures","animationEnabled","Animated","Value","openingRouteKeys","includes","map","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","length","defaultTransitionPreset","ModalFadeTransition","Platform","OS","gestureEnabled","transitionSpec","forNoAnimationCard","headerStyleInterpolator","cardOverlayEnabled","headerMode","header","progress","current","next","__memo","every","it","headerHeights","constructor","e","nativeEvent","setState","previousHeight","getPreviousRoute","previousScene","find","SafeAreaProviderCompat","initialMetrics","frame","render","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","activeScreensLimit","detachPreviousScreen","lastIndexOf","forModalPresentationIOS","floatingHeader","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styles","floating","absolute","container","handleLayout","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","headerTintColor","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","backgroundColor","headerBackgroundColor","headerDarkContent","isDark","isNextScreenTransparent","detachCurrentScreen","absoluteFill","create","flex","position","zIndex"],"mappings":"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","sourcesContent":["import {\n  Background,\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  DefaultTransition,\n  ModalFadeTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  StackNavigationOptions,\n} from '../../types';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = (descriptor?.options || {}) as StackNavigationOptions;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n\n      const oldScene = state.scenes[index];\n\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute\n        ? gestures[previousRoute.key]\n        : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n      const descriptor =\n        props.descriptors[route.key] ||\n        state.descriptors[route.key] ||\n        (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n      const nextDescriptor =\n        props.descriptors[nextRoute?.key] || state.descriptors[nextRoute?.key];\n\n      const previousDescriptor =\n        props.descriptors[previousRoute?.key] ||\n        state.descriptors[previousRoute?.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig =\n        index !== self.length - 1 &&\n        nextDescriptor &&\n        nextDescriptor.options.presentation !== 'transparentModal'\n          ? nextDescriptor.options\n          : descriptor.options;\n\n      let defaultTransitionPreset =\n        optionsForTransitionConfig.presentation === 'modal'\n          ? ModalTransition\n          : optionsForTransitionConfig.presentation === 'transparentModal'\n          ? ModalFadeTransition\n          : DefaultTransition;\n\n      const {\n        animationEnabled = Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false\n          ? forNoAnimationCard\n          : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = (Platform.OS !== 'ios' &&\n          optionsForTransitionConfig.presentation !== 'transparentModal') ||\n          getIsModalPresentation(cardStyleInterpolator),\n      } = optionsForTransitionConfig;\n\n      const headerMode: StackHeaderMode =\n        descriptor.options.headerMode ??\n        (!(\n          optionsForTransitionConfig.presentation === 'modal' ||\n          optionsForTransitionConfig.presentation === 'transparentModal' ||\n          nextDescriptor?.options.presentation === 'modal' ||\n          nextDescriptor?.options.presentation === 'transparentModal' ||\n          getIsModalPresentation(cardStyleInterpolator)\n        ) &&\n        Platform.OS === 'ios' &&\n        descriptor.options.header === undefined\n          ? 'float'\n          : 'screen');\n\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode,\n          },\n        },\n        progress: {\n          current: getProgressFromGesture(\n            currentGesture,\n            state.layout,\n            descriptor\n          ),\n          next:\n            nextGesture &&\n            nextDescriptor?.options.presentation !== 'transparentModal'\n              ? getProgressFromGesture(\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n          previous: previousGesture\n            ? getProgressFromGesture(\n                previousGesture,\n                state.layout,\n                previousDescriptor\n              )\n            : undefined,\n        },\n        __memo: [\n          state.layout,\n          descriptor,\n          nextDescriptor,\n          previousDescriptor,\n          currentGesture,\n          nextGesture,\n          previousGesture,\n        ],\n      };\n\n      if (\n        oldScene &&\n        scene.__memo.every((it, i) => {\n          // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n          return oldScene.__memo[i] === it;\n        })\n      ) {\n        return oldScene;\n      }\n\n      return scene;\n    });\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n          ? i !==\n            scenes\n              .map((scene) => scene.descriptor.options.cardStyleInterpolator)\n              .lastIndexOf(forModalPresentationIOS)\n          : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <Background>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (index < self.length - activeScreensLimit - 1) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[self.length - 1];\n              const outputValue =\n                index === self.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= self.length - activeScreensLimit\n                  ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                  : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              headerStyle,\n              headerTintColor,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            const { backgroundColor: headerBackgroundColor } =\n              StyleSheet.flatten(headerStyle) || {};\n\n            let headerDarkContent: boolean | undefined;\n\n            if (headerShown) {\n              if (typeof headerTintColor === 'string') {\n                headerDarkContent = Color(headerTintColor).isDark();\n              } else if (typeof headerBackgroundColor === 'string') {\n                headerDarkContent = !Color(headerBackgroundColor).isDark();\n              }\n            }\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  headerDarkContent={headerDarkContent}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </Background>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]}