{"version":3,"sources":["ModalStatusBarManager.tsx"],"names":["useTheme","React","StatusBar","StyleSheet","ModalStatusBarManager","dark","layout","insets","style","darkTheme","overlapping","setOverlapping","useState","scale","width","offset","top","flattenedStyle","flatten","translateY","transform","find","s","undefined","useEffect","listener","value","sub","addListener","removeListener","darkContent"],"mappings":"AAAA,SAASA,QAAT,QAAyB,0BAAzB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,cAAtC;AAYA,eAAe,SAASC,qBAAT,CAA+B;AAC5CC,EAAAA,IAD4C;AAE5CC,EAAAA,MAF4C;AAG5CC,EAAAA,MAH4C;AAI5CC,EAAAA;AAJ4C,CAA/B,EAKL;AAAA;;AACR,QAAM;AAAEH,IAAAA,IAAI,EAAEI;AAAR,MAAsBT,QAAQ,EAApC;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCV,KAAK,CAACW,QAAN,CAAe,IAAf,CAAtC;AAEA,QAAMC,KAAK,GAAG,IAAI,KAAKP,MAAM,CAACQ,KAA9B;AACA,QAAMC,MAAM,GAAG,CAACR,MAAM,CAACS,GAAP,GAAa,EAAd,IAAoBH,KAAnC;AAEA,QAAMI,cAAc,GAAGd,UAAU,CAACe,OAAX,CAAmBV,KAAnB,CAAvB;AACA,QAAMW,UAAU,GAAGF,cAAH,aAAGA,cAAH,gDAAGA,cAAc,CAAEG,SAAnB,oFAAG,sBAA2BC,IAA3B,CAChBC,CAAD,IAAYA,CAAC,CAACH,UAAF,KAAiBI,SADZ,CAAH,2DAAG,uBAEhBJ,UAFH;AAIAlB,EAAAA,KAAK,CAACuB,SAAN,CAAgB,MAAM;AACpB,UAAMC,QAAQ,GAAG,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAkC;AACjDf,MAAAA,cAAc,CAACe,KAAK,GAAGX,MAAT,CAAd;AACD,KAFD;;AAIA,UAAMY,GAAG,GAAGR,UAAH,aAAGA,UAAH,uBAAGA,UAAU,CAAES,WAAZ,CAAwBH,QAAxB,CAAZ;AAEA,WAAO,MAAMN,UAAN,aAAMA,UAAN,uBAAMA,UAAU,CAAEU,cAAZ,CAA2BF,GAA3B,CAAb;AACD,GARD,EAQG,CAACZ,MAAD,EAASI,UAAT,CARH;AAUA,QAAMW,WAAW,GAAGzB,IAAH,aAAGA,IAAH,cAAGA,IAAH,GAAW,CAACI,SAA7B;AAEA,sBACE,oBAAC,SAAD;AACE,IAAA,QAAQ,MADV;AAEE,IAAA,QAAQ,EAAEC,WAAW,IAAIoB,WAAf,GAA6B,cAA7B,GAA8C;AAF1D,IADF;AAMD","sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StatusBar, StyleSheet } from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport type { Layout } from '../types';\n\ntype Props = {\n  dark: boolean | undefined;\n  layout: Layout;\n  insets: EdgeInsets;\n  style: any;\n};\n\nexport default function ModalStatusBarManager({\n  dark,\n  layout,\n  insets,\n  style,\n}: Props) {\n  const { dark: darkTheme } = useTheme();\n  const [overlapping, setOverlapping] = React.useState(true);\n\n  const scale = 1 - 20 / layout.width;\n  const offset = (insets.top - 34) * scale;\n\n  const flattenedStyle = StyleSheet.flatten(style);\n  const translateY = flattenedStyle?.transform?.find(\n    (s: any) => s.translateY !== undefined\n  )?.translateY;\n\n  React.useEffect(() => {\n    const listener = ({ value }: { value: number }) => {\n      setOverlapping(value < offset);\n    };\n\n    const sub = translateY?.addListener(listener);\n\n    return () => translateY?.removeListener(sub);\n  }, [offset, translateY]);\n\n  const darkContent = dark ?? !darkTheme;\n\n  return (\n    <StatusBar\n      animated\n      barStyle={overlapping && darkContent ? 'dark-content' : 'light-content'}\n    />\n  );\n}\n"]}