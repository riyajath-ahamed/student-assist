{"version":3,"sources":["TabBarIndicator.tsx"],"names":["React","Animated","Easing","StyleSheet","I18nManager","Platform","TabBarIndicator","Component","navigationState","layout","width","getTabWidth","props","isIndicatorShown","routes","every","_","i","timing","opacity","toValue","duration","easing","in","linear","useNativeDriver","start","Value","position","inputRange","map","outputRange","reduce","acc","translateX","interpolate","extrapolate","multiply","isRTL","componentDidMount","fadeInIndicator","componentDidUpdate","render","style","transform","length","getTranslateX","push","scaleX","styles","indicator","OS","left","index","create","backgroundColor","bottom","right","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Easing,\n  StyleSheet,\n  I18nManager,\n  StyleProp,\n  ViewStyle,\n  Platform,\n} from 'react-native';\n\nimport type { Route, SceneRendererProps, NavigationState } from './types';\n\nexport type GetTabWidth = (index: number) => number;\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  width: string | number;\n  style?: StyleProp<ViewStyle>;\n  getTabWidth: GetTabWidth;\n};\n\nexport default class TabBarIndicator<T extends Route> extends React.Component<\n  Props<T>\n> {\n  componentDidMount() {\n    this.fadeInIndicator();\n  }\n\n  componentDidUpdate() {\n    this.fadeInIndicator();\n  }\n\n  private fadeInIndicator = () => {\n    const { navigationState, layout, width, getTabWidth } = this.props;\n\n    if (\n      !this.isIndicatorShown &&\n      width === 'auto' &&\n      layout.width &&\n      // We should fade-in the indicator when we have widths for all the tab items\n      navigationState.routes.every((_, i) => getTabWidth(i))\n    ) {\n      this.isIndicatorShown = true;\n\n      Animated.timing(this.opacity, {\n        toValue: 1,\n        duration: 150,\n        easing: Easing.in(Easing.linear),\n        useNativeDriver: true,\n      }).start();\n    }\n  };\n\n  private isIndicatorShown = false;\n\n  private opacity = new Animated.Value(this.props.width === 'auto' ? 0 : 1);\n\n  private getTranslateX = (\n    position: Animated.AnimatedInterpolation,\n    routes: Route[],\n    getTabWidth: GetTabWidth\n  ) => {\n    const inputRange = routes.map((_, i) => i);\n\n    // every index contains widths at all previous indices\n    const outputRange = routes.reduce<number[]>((acc, _, i) => {\n      if (i === 0) return [0];\n      return [...acc, acc[i - 1] + getTabWidth(i - 1)];\n    }, []);\n\n    const translateX = position.interpolate({\n      inputRange,\n      outputRange,\n      extrapolate: 'clamp',\n    });\n\n    return Animated.multiply(translateX, I18nManager.isRTL ? -1 : 1);\n  };\n\n  render() {\n    const { position, navigationState, getTabWidth, width, style, layout } =\n      this.props;\n    const { routes } = navigationState;\n\n    const transform = [];\n\n    if (layout.width) {\n      const translateX =\n        routes.length > 1\n          ? this.getTranslateX(position, routes, getTabWidth)\n          : 0;\n\n      transform.push({ translateX });\n    }\n\n    if (width === 'auto') {\n      const inputRange = routes.map((_, i) => i);\n      const outputRange = inputRange.map(getTabWidth);\n\n      transform.push(\n        {\n          scaleX:\n            routes.length > 1\n              ? position.interpolate({\n                  inputRange,\n                  outputRange,\n                  extrapolate: 'clamp',\n                })\n              : outputRange[0],\n        },\n        { translateX: 0.5 }\n      );\n    }\n\n    return (\n      <Animated.View\n        style={[\n          styles.indicator,\n          { width: width === 'auto' ? 1 : width },\n          // If layout is not available, use `left` property for positioning the indicator\n          // This avoids rendering delay until we are able to calculate translateX\n          // If platform is macos use `left` property as `transform` is broken at the moment.\n          // See: https://github.com/microsoft/react-native-macos/issues/280\n          layout.width && Platform.OS !== 'macos'\n            ? { left: 0 }\n            : { left: `${(100 / routes.length) * navigationState.index}%` },\n          { transform },\n          width === 'auto' ? { opacity: this.opacity } : null,\n          style,\n        ]}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  indicator: {\n    backgroundColor: '#ffeb3b',\n    position: 'absolute',\n    left: 0,\n    bottom: 0,\n    right: 0,\n    height: 2,\n  },\n});\n"]}